/* Copyright (C) 2020 David Svantesson
 * MIT License
 *
 */

function parsePlantumlCodeBlocks(plantumlServer = "http://www.plantuml.com/plantuml", htmlClass = "language-plantuml") {
	var codeBlocks = document.getElementsByClassName(htmlClass);

	for (var block_i = 0; block_i < codeBlocks.length; block_i++) {
			block_string = codeBlocks[block_i].innerText
			//UTF8
			block_string = unescape(encodeURIComponent(block_string));
			codeBlocks[block_i].innerHTML = "<img class=\"swarmit-diag\" src=\"" + plantumlServer + "/img/" + encode64(zip_deflate(block_string, 9)) + "\">";
	}

}
function parseCloudgramCodeBlocks(gcServer = "https://cloudgram.dedalusone.com/", htmlClass = "language-cloudgram") {
	var codeBlocks = document.getElementsByClassName(htmlClass);
	for (var block_i = 0; block_i < codeBlocks.length; block_i++) {
			block_string = codeBlocks[block_i].innerText
			block_string = encodeURIComponent(block_string);
			url = gcServer + "embed?document=" + block_string
			var iframe = document.createElement('iframe')
			iframe.classList.add("swarmit-diag")
			iframe.setAttribute("width", "100%")
			iframe.setAttribute("height", "560px")
			iframe.setAttribute("src", url)
			codeBlocks[block_i].parentNode.replaceChild(iframe, codeBlocks[block_i])

	}
}
function parseMermaidCodeBlocks(mmServer = "https://mermaid.live/", htmlClass = "language-mermaid") {
	var codeBlocks = document.getElementsByClassName(htmlClass);
	for (var block_i = 0; block_i < codeBlocks.length; block_i++) {
			console.log(codeBlocks[block_i])
			block_string = codeBlocks[block_i].innerHTML
			block_string = encodeURIComponent(block_string);
			url = mmServer + "pako:" + block_string
	}
}
function parseMarkMapCodeBlocks(mmServer = "https://example.com/", htmlClass = "language-markmap") {
	var codeBlocks = document.getElementsByClassName(htmlClass);
	for (var block_i = 0; block_i < codeBlocks.length; block_i++) {
			block_string = codeBlocks[block_i].innerText;
			block_string = encodeURIComponent(block_string);
			url = mmServer + "?" + block_string
			var iframe = document.createElement('iframe')
			iframe.classList.add("swarmit-diag")
			iframe.setAttribute("width", "100%")
			iframe.setAttribute("height", "640px")
			iframe.setAttribute("allow", "fullscreen")
			iframe.setAttribute("allowfullscreen", true)
			iframe.setAttribute("referrerpolicy", "no-referrer")
			iframe.setAttribute("frameborder", 0)
			iframe.setAttribute("scrolling", "no")
			iframe.setAttribute("src", url)
			iframe.frameborder = 0
			// codeBlocks[block_i].innerHTML = "<img class=\"swarmit-diag\" src=\"" + mmServer + "/svc/" + encode64(zip_deflate(block_string, 9)) + "\">";

			codeBlocks[block_i].parentNode.replaceChild(iframe, codeBlocks[block_i])
	}
}
function parseD2CodeBlocks(mmServer = "https://example.com/", htmlClass = "language-d2lang") {
	var codeBlocks = document.getElementsByClassName(htmlClass);
	for (var block_i = 0; block_i < codeBlocks.length; block_i++) {
			block_string = codeBlocks[block_i].innerText;
			block_string = encodeURIComponent(block_string);
			url = mmServer + "?" + block_string
			var iframe = document.createElement('iframe')
			iframe.classList.add("swarmit-diag")
			iframe.setAttribute("width", "100%")
			iframe.setAttribute("height", "640px")
			iframe.setAttribute("allow", "fullscreen")
			iframe.setAttribute("allowfullscreen", true)
			iframe.setAttribute("referrerpolicy", "no-referrer")
			iframe.setAttribute("frameborder", 0)
			iframe.setAttribute("scrolling", "no")
			iframe.setAttribute("src", url)
			iframe.frameborder = 0
			// codeBlocks[block_i].innerHTML = "<img class=\"swarmit-diag\" src=\"" + mmServer + "/svc/" + encode64(zip_deflate(block_string, 9)) + "\">";

			codeBlocks[block_i].parentNode.replaceChild(iframe, codeBlocks[block_i])
	}
}
function parseSIDESCCodeBlocks(mmServer = "https://example.com/", htmlClass = "language-sidesc") {
	var codeBlocks = document.getElementsByClassName(htmlClass);
	for (var block_i = 0; block_i < codeBlocks.length; block_i++) {
			const el = codeBlocks[block_i]
			block_string = el.innerHTML
			block_string = encodeURIComponent(block_string);
			const url = mmServer + "?" + block_string
			console.log(url)
			console.log(el)
			fetch(url)
					.then(response => {
							return response.text()
					})
					.then(html => {
							const parser = new DOMParser()
							const doc = parser.parseFromString(html, "text/html")
							el.parentNode.innerHTML = doc.querySelector('body').innerHTML
							// el.classList.remove("hidden");
					})
					.catch(error => {
							console.error('Failed to fetch page: ', error)
					})
	}
}